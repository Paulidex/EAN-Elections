name: "CodeQL Analysis"

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  schedule:
    - cron: '0 2 * * *'  # Daily at 2am

env:
  ANDROID_SDK_ROOT: /usr/lib/android-sdk

jobs:
  analyze:
    name: Analyze (${{ matrix.language }})
    runs-on: ${{ matrix.language == 'swift' && 'macos-latest' || 'ubuntu-latest' }}
    timeout-minutes: 60
    permissions:
      security-events: write
      actions: read
      contents: read

    strategy:
      fail-fast: false
      matrix:
        language: [java, cpp, swift]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Setup Java environment
      - name: Setup Java
        if: matrix.language == 'java'
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      # Install C++ dependencies
      - name: Install C++ dependencies
        if: matrix.language == 'cpp'
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential cmake

      # Setup Flutter SDK for Swift
      - name: Setup Flutter SDK
        if: matrix.language == 'swift'
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.24.0'
          channel: 'stable'

      - name: Initialize CodeQL
        uses: github/codeql-action/init@v3
        with:
          languages: ${{ matrix.language }}

      - name: Build Java code
        if: matrix.language == 'java'
        run: |
          echo "Building Java/Kotlin code..."

          if [ -f android/build.gradle ] || [ -f android/build.gradle.kts ]; then
            echo "Android project detected"
            FLUTTER_SDK_PATH=$(flutter sdk-path)
            echo "sdk.dir=$ANDROID_SDK_ROOT" > android/local.properties
            echo "flutter.sdk=$FLUTTER_SDK_PATH" >> android/local.properties
            cd android
            if [ -f ./gradlew ]; then
              ./gradlew assembleDebug --no-daemon --stacktrace
            else
              gradle assembleDebug --no-daemon --stacktrace
            fi
            cd ..
          fi

          if [ -f ./gradlew ]; then
            echo "Root gradle wrapper found, building"
            ./gradlew build --no-daemon --stacktrace
          elif [ -f ./build.gradle ] || [ -f ./build.gradle.kts ]; then
            echo "Gradle build files found in root, building"
            gradle build --no-daemon --stacktrace
          elif [ -f ./pom.xml ]; then
            echo "Maven project found, building"
            mvn clean compile -DskipTests
          else
            echo "No Java build files found, skipping build"
          fi

      - name: Build C++ code
        if: matrix.language == 'cpp'
        run: |
          echo "Building C++ code..."
          if [ -f CMakeLists.txt ]; then
            mkdir -p build
            cd build
            cmake ..
            make -j$(nproc)
            cd ..
          elif [ -f linux/Makefile ]; then
            cd linux
            make -j$(nproc)
            cd ..
          elif [ -f Makefile ]; then
            make -j$(nproc)
          else
            echo "No C++ build system detected, skipping build"
          fi

      - name: Build Swift code
        if: matrix.language == 'swift'
        run: |
          echo "Building Swift code..."
          if [ -f pubspec.yaml ]; then
            echo "Flutter project detected"
            flutter pub get

            if [ -d ios ]; then
              echo "Building iOS app"
              flutter build ios --no-codesign --simulator
            fi

            if [ -d macos ]; then
              echo "Building macOS app"
              flutter build macos --no-codesign
            fi
          elif [ -f Package.swift ]; then
            echo "Swift Package Manager detected"
            swift build
          elif ls *.xcodeproj 1> /dev/null 2>&1 || ls *.xcworkspace 1> /dev/null 2>&1; then
            echo "Xcode project detected"
            PROJ=$(ls *.xcworkspace 2>/dev/null || ls *.xcodeproj 2>/dev/null | head -1)
            xcodebuild -workspace "$PROJ" -scheme $(xcodebuild -workspace "$PROJ" -list | grep -A 1 "Schemes:" | tail -1 | xargs) -destination "platform=iOS Simulator,name=iPhone 14" build
          else
            echo "No recognized Swift build system found, skipping build"
          fi

      - name: Perform CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          upload: true
