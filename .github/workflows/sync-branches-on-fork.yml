name: Fork Changes - Sync all branches with main on fork

on:
  push:
    branches:
      - main  # Trigger when main is updated (e.g., via "Fetch upstream")
  workflow_dispatch:  # Allow manual execution from Actions tab

permissions:
  contents: write  # Needed to allow pushing from GitHub Actions

jobs:
  sync-branches:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Ensure full history for merge/rebase

      - name: Set up Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"

      - name: Conditionally set remote to original (only in Paulidex/EAN-Elections)
        if: github.repository == 'Paulidex/EAN-Elections'
        run: |
          git remote set-url origin https://x-access-token:${{ secrets.GH_PAT }}@github.com/Paulidex/EAN-Elections.git

      - name: Fetch all branches
        run: |
          git fetch --all

      - name: Sync branches with main
        run: |
          branches=("develop" "feature/deployment-and-apk" "feature/device-sensors-and-location" "feature/firebase-authentication" "feature/local-database-sqlite" "feature/mvp-data-connection" "feature/mvp-ui-navigation" "feature/project-setup-and-structure" "feature/ui-animations-and-charts")

          for branch in "${branches[@]}"; do
            echo "Processing branch: $branch"
            git fetch origin $branch
            git checkout $branch || git checkout -b $branch origin/$branch

            echo "Merging main into $branch..."
            git merge origin/main --no-edit || {
              echo "Merge conflict in $branch. Resolving in favor of main..."
              git checkout --theirs .
              git add .
              git commit -m "Auto-merge main into $branch with conflict resolution"
            }

            if [[ "$branch" == "develop" ]]; then
              echo "Protected branch detected, fetching latest ref and pushing normally with retries..."
              attempt=0
              max_attempts=3

              until git fetch origin $branch && git push origin $branch || [ $attempt -eq $max_attempts ]; do
                echo "Push failed on $branch, retrying in 5 seconds..."
                sleep 5
                attempt=$((attempt+1))
              done
            else
              echo "Feature branch detected, fetching latest ref and pushing with force-with-lease (with retries)..."
              attempt=0
              max_attempts=3

              until git fetch origin $branch && git push origin $branch --force-with-lease || [ $attempt -eq $max_attempts ]; do
                echo "Push failed on $branch, retrying in 5 seconds..."
                sleep 5
                attempt=$((attempt+1))
              done
            fi

            echo "Finished processing $branch"
          done
